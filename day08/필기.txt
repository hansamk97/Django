1. get_context_data
 - 장고의 ListView에서 상속된 메서드로, 
 컨텍스트 데이터를 가져오고 반환하는 역할
 - get_context_data를 오버라이드하여 컨텍스트에
 추가적인 데이터를 포함할 수 있다. 

2. c.post_set.count
 2-1. post_set 
  - 장고 제공 기능
   - FK, ManyToMany 등과 같이 관계형 필드
  (RelatedField)에서 사용할 수 있다. 
  - relatedname_set 

 2-2. c.post_set.count
 - 역참조를 통해 연결된 객체수를 세는 기능이다.
 - "Post" 모델을 참조하는 다른 모델에서 역참조할 때
  사용되는 이름이다. 
  - 해당 카테고리에 속한 "Post"객체의 개수를 세는
  기능을 수행한다. 

3. 조회 쿼리 set
 3-1. 모든 객체 조회 :
  posts = Post.objects.all
 
 3-2. 특정 조건을 만족하는 객체 조회
   posts = Post.objects.filter(title='django')

 3-3. 일치하는 객체 하나 조회(단일객체)
   post = Post.objects.get(title='django')

 3-4. 조건을 만족하는 객체 개수 조회
   count = Post.objects.filter(catetory=None).count()

 3-5. 정렬된 객체 조회
   작성일 기준 내림차순응로 정렬된 포스트 조회
   posts = Post.objects.order_by('-create_at')

 3-6. 일부 객체만 조회(페이징)
 처음 10개를 조회
  posts = Post.objects.all()[:10]

 3-7. 특정 필드만 선택해서 조회
  제목만 조회
  posts = Post.objects.values('title')

 3-8. 중복된 객체 제거
  distinct_titles 
	= Post.objects.values('title').distinct()

 3-9. 특정 기간동안 객체 조회
  posts 
 = Post.objects.filter(create_at__range=(start_date, end_date))

4. many to many ralation
 - 다대다 관계
 - A모델의 여러 레코드가 B모델의 여러 레코드에 
 연결될 수 있는 관계
 - Post, Tag
 - 다대다 관계의 클래스에서의 컬럼 작성 위치는 
 중요하지 않으나, 비지니스 로직적으로 판단했을때
 중요한 클래스에 놓는게 맞다.

5. 역참조
 ** Post에서 
 tags = models.ManyToManyField(Tag, blank=True)
 manytomany 관계 작성을 기준으로 설명
 - post객체는 tags를 통해 연결된 태그들을 가져올 수 
 있다. 

	post = Post.objects.get(id=1)
	# 해당 게시물에 연결된 모든 태그들을 가져옴
	tags = post.tags.all()

 - 반대로, tag객체는 post_set을 통해 연결된 게시물을
 가져올 수 있다.
 
	tag = Tag.objects.get(id=1)
	# 해당 태그와 연결된 모든 게시물들을 가져옴
	posts = tag.post_set.all()

 - 역참조 매니저를 통해 다대다 관계를 역방향으로 조회할
 수 있으며, 필요에 따라 역참조 매니저의 이름을 직접 
 설정할 수있다. 

6. CreateView
 - 새로운 화면을 만드는데 필요하다 
  - fields는 Post 모델에서 가져올 필수 리스트
  - 일반적으로 CreateView에서 사용되는 템플릿 이름은
 "모델명_form.html"이다. 
 - Post모델의 객체를 생성하는 CreateView를 구현하고 
 있기 때문에 post_form.html을 요청
 
 6-1. model = Post
 - 데이터를 저장할 모델을 지정한다

 6-2. fields
 - 사용할 폼 클래스를 지정
 
 6-3. template_name
  - 사용할 템플릿 파일의 경로를 지정한다.
  기본값 post_form.html

 6-4. success_url
  - 그 후에 success_url로 리다이렉션

 6-5. form_valid()
  - form_valid를 정의하지 않고, success_url을 명시하지
  않으면, CreateView는 내부적으로 기본적인 동작을 
  수행한다. 
	-> 폼 데이터 유효성 검사 
	-> 모델 인스턴스 생성 : 폼 데이터가 유효하다면,
	해당 데이터를 기반으로 모델 클래스의 
	인스턴스를 생성한다.
	-> 데이터베이스에 저장 : 모델 인스턴스를
	기반으로 데이터베이스에 저장
	-> 리다이렉션 : 저장이 성공하면, CreateView는
	기본적으로 해당 모델의 get_absolute_url
 	메서드를 호출하여 리다이렉션할 URL을 가져온다.
	만약, 해당 메서드가 정의되어 있지 않은 경우,
	success_url이 url요청을 보낸다.
	-> 에러처리 : 만약 get_absolute_url
	메소드도 없고, success_url이 명시되지
	않은 경우에는 에러가 발생한다.
 

7. {{ form }}
 - 장고 템플릿에서 {{ form }}은 전체 폼을 렌더링하기
 위해 사용되는 템플릿 변수이다
 - 이 변수는 폼에 대한 HTML마크업을 나타내며, 폼의 
 필드, 레이블, 입력 요소, 그리고 관계된 에러나
 유효성 검사 메시지 등이 포함된다.

8. {% csrf_token %}
 - 보안을 위해 장고에서 제공해주는 기능, 봇에의해
 광고로 게시판이 덮어지지 않도록 함






